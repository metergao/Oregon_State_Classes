Reading GPRC: /etc/gprc ...Done.

               GP/PARI CALCULATOR Version 2.5.0 (released)
           i686 running linux (ix86/GMP kernel) 32-bit version
    compiled: Nov 17 2011, gcc-4.6.2 (Ubuntu/Linaro 4.6.2-2ubuntu1) 
             (readline v6.2 enabled, extended help enabled)

                 Copyright (C) 2000-2011 The PARI Group

PARI/GP is free software, covered by the GNU General Public License, and 
comes WITHOUT ANY WARRANTY WHATSOEVER.

Type ? for help, \q to quit.
Type ?12 for how to get moral (and possibly technical) support.

parisize = 4000000, primelimit = 500509
? p = nextprime(random(2^200))
%1 = 1301388010064298872804583799156615410518255673425041015199531
? q = nextprime(random(2^200))
%2 = 1077422176738962791946367463871872959293008136329763093132541
? N = p*q;
? phi = (p-1)*(q-1);
? eulerphi(N)
^C  ***   at top-level: eulerphi(N)
  ***                 ^-----------
  *** eulerphi: user interrupt after 10,916 ms.

  ***   Break loop: type <Return> to continue; 'break' to go back to GP
break> 

? e = nextprime(random(phi))
%5 = 743211152610542698115502062182913731938134210920838231379292601027029157934032057009900596466586591211899758845395823391
? d = lift( 1/ Mod(e,phi))
%6 = 852841288346907652767387711797748511397775610398048168249894936039755919938265806108806338619284188035461110686500974111
? rsa(m) = lift( Mod(m,N)^e )
%7 = (m)->lift(Mod(m,N)^e)
? rsainv(c) = lift( Mod(c,N)^d )
%8 = (c)->lift(Mod(c,N)^d)
? rsa(12345678)
%9 = 40643739686537229674297016626132249542407517619788938054389083473815486913766965866886205830828204096027243076314906577
? rsainv(%)
%10 = 12345678
? rsainv(rsa(29849248729847234))
%11 = 29849248729847234
? 
? 
? 
? 
? 
? 
? 
? 
? for(x=0,14, print([x % 3, x % 5]))
[0, 0]
[1, 1]
[2, 2]
[0, 3]
[1, 4]
[2, 0]
[0, 1]
[1, 2]
[2, 3]
[0, 4]
[1, 0]
[2, 1]
[0, 2]
[1, 3]
[2, 4]
? 
? 
? ?chinese
chinese(x,{y}): x,y being both intmods (or polmods) computes z in the 
same residue classes as x and y.

? chinese(Mod(2,3), Mod(4,5))
%12 = Mod(14, 15)
? \\ find x such that x == 2 (mod3) and x == 4 (mod5) ==> result=14
? chinese(Mod(1,3), Mod(2,5))
%13 = Mod(7, 15)
? for(x=0,14, print(chinese( Mod(x,3), Mod(x,5) )))
Mod(0, 15)
Mod(1, 15)
Mod(2, 15)
Mod(3, 15)
Mod(4, 15)
Mod(5, 15)
Mod(6, 15)
Mod(7, 15)
Mod(8, 15)
Mod(9, 15)
Mod(10, 15)
Mod(11, 15)
Mod(12, 15)
Mod(13, 15)
Mod(14, 15)
? 
? 
? 
? for(x=0,30, print([x % 3, x % 5]))
[0, 0]
[1, 1]
[2, 2]
[0, 3]
[1, 4]
[2, 0]
[0, 1]
[1, 2]
[2, 3]
[0, 4]
[1, 0]
[2, 1]
[0, 2]
[1, 3]
[2, 4]
[0, 0]
[1, 1]
[2, 2]
[0, 3]
[1, 4]
[2, 0]
[0, 1]
[1, 2]
[2, 3]
[0, 4]
[1, 0]
[2, 1]
[0, 2]
[1, 3]
[2, 4]
[0, 0]
? 
? 
? 
? \\ solve sun tzu suan's riddle
? chinese(Mod(2,3), Mod(3,5), Mod(2,7))
  ***   too many arguments: ...hinese(Mod(2,3),Mod(3,5),Mod(2,7))
  ***                                                   ^---------
? chinese( chinese(Mod(2,3), Mod(3,5)), Mod(2,7))
%14 = Mod(23, 105)
? 
? 
? 
? 
? \\ crt optimized exponentiation
? 
? p = nextprime(random(2^2000));
? q = nextprime(random(2^2000));
? N = p*q;
? normal_exponentiate(c,d) = lift(  Mod(c,N)^d    ) 
%18 = (c,d)->lift(Mod(c,N)^d)
? crt_exponentiate(c,d)  =   lift( chinese( Mod(c,p)^d,  Mod(c,q)^d ) )
%19 = (c,d)->lift(chinese(Mod(c,p)^d,Mod(c,q)^d))
? #
   timer = 1 (on)
? #
   timer = 0 (off)
? c = random(N);
? d = random(N);
? #
   timer = 1 (on)
? normal_exponentiate(c,d)
time = 309 ms.
%22 = 2819349762757406910290018637058161688478999949234144578017101103106895929647261777715922703019149040480585034850376495102724494452540643830104320966151114842218477097048226979351016595679854543726687153524685909524741470417926962657841158976130646058500777923985842828343891553502356837954225837685612867900466759753221177779689601006136090141337054195821443408660205931815696402991080872449789208997710314095273744298173980032956277396096537004789000993002635040676976003219364363156845841312834495045343407726433541097232189918667853162489235680431331260685434128218167728242007782403636438241826300211358067453879360063748311057497861049798554378955598861997145836803530361106020546848390284396738683707013652363350754587628852653863396631159572795549486202793783682345389339704516657538900820091646029894709086954069059328018120711275734658280957453329321494743814521663288776334994047215418070120181698860035906732141203790883726932983854071797535993038677848131827490418099166314214571054765829954087514986597352568760952832784070379174522514427932963674231304044028085149862935136183922281473258199357678148124403471548913004541458554565817637573116220569893770554083033069555061835206722767499031
? crt_exponentiate(c,d)
time = 216 ms.
%23 = 2819349762757406910290018637058161688478999949234144578017101103106895929647261777715922703019149040480585034850376495102724494452540643830104320966151114842218477097048226979351016595679854543726687153524685909524741470417926962657841158976130646058500777923985842828343891553502356837954225837685612867900466759753221177779689601006136090141337054195821443408660205931815696402991080872449789208997710314095273744298173980032956277396096537004789000993002635040676976003219364363156845841312834495045343407726433541097232189918667853162489235680431331260685434128218167728242007782403636438241826300211358067453879360063748311057497861049798554378955598861997145836803530361106020546848390284396738683707013652363350754587628852653863396631159572795549486202793783682345389339704516657538900820091646029894709086954069059328018120711275734658280957453329321494743814521663288776334994047215418070120181698860035906732141203790883726932983854071797535993038677848131827490418099166314214571054765829954087514986597352568760952832784070379174522514427932963674231304044028085149862935136183922281473258199357678148124403471548913004541458554565817637573116220569893770554083033069555061835206722767499031
? 

