* OpenCL 
    ~ Genral idea
        The proccess of running computations on the GPU.
    ~ Two programs(C++ and .cl)
        Consists of a C/C++ callable API and a C-ish style programming language for the GPU.
    ~ SPMD model
        Single program multiple data, break the problem up into smaller chuncks and spread them out accross multiple threads. 
    ~ work-groups
        Each work-group is organized as a grid of Work-items. The mechanical arm with multiple grabbers.
    ~ work-items
        Each thread is assigned one work item. 
    ~ 1D or 2D or 3D
    ~ thousands of threads
    ~ get_num_groups( )
    ~ get_global_size( )
    ~ get_local_size( )
    ~ get_global_id( )
    ~ get_local_id( )
    ~ SIMD parallelism (float4, etc.)
    ~ types of memory and where they are
    ~ steps in creating and running an OpenCL program
    ~ host memory vs. device memory
    ~ command queue
    ~ compiling and building .cl code
    ~ enqueuing
    ~ executing a kernel
    ~ transferring buffers to/from the GPU
    ~ performance.
* OpenCL Reduction:
    ~ general idea
    ~ local memory array
    ~ mask
    ~ offset
    ~ barriers.
* OpenCL Events:
    ~ throwing events
    ~ waiting for events.
* OpenCL / OpenGL Interoperability:
    ~ general idea
    ~ OpenGL rendering context
    ~ OpenGL vertex buffers
    ~ OpenGL binding
    ~ acquiring and releasing a buffer
    ~ clCreateFromGLBuffer
    ~ particles.cpp
    ~ particles.cl
    ~ rendering to a texture.
* OpenCL Assembly Language:
    ~ Difference between constant and const
    ~ Difference between distance( ), length( ), normalize( ) and fast_distance( ), fast_length( ), fast_normalize( ).
* Vectorization:
    ~ Single Instruction Multiple Data (SIMD)
        # How it works.
        # Why use it. 
        # MMX vs. SSE vs. AVX vs. AVX-512
        # Performance nuances
        # array multiplication
        # summing
        # Pre-fetching. 
    ~ OpenMP 4.0 new features to get at SIMD. 
    ~ C Extensions for Array Notation to get at SIMD.
* Xeon Phi:
    ~ architecture
    ~ 57 cores
    ~ in-order instruction processing
    ~ 512-bit wide SIMD
* OpenGL Compute Shaders: 
    ~ What are they
    ~ how do they fit into the graphics pipeline.
    ~ How they compare with using OpenCL.
* Message Passing Interface (MPI):
    ~ general idea
    ~ multiple CPUs
    ~ SPMD model
    ~ sending
    ~ receiving
    ~ reduction
    ~ scatter / gather
    ~ barriers
    ~ derived types.
* More Information.
