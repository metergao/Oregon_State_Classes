--- /home/bob/Documents/cs444/linux/mm/slob.c	2014-11-07 11:24:29.459765972 -0800
+++ /home/bob/Documents/cs444/hw4/pristeen.c	2014-11-24 13:19:40.031987550 -0800
@@ -86,6 +86,8 @@
 typedef s32 slobidx_t;
 #endif
 
+static unsigned long print_counter = 0;
+
 struct slob_block {
 	slobidx_t units;
 };
@@ -269,122 +271,234 @@
  */
 static void *slob_page_alloc(struct slob_page *sp, size_t size, int align)
 {
-	slob_t *prev, *cur, *aligned = NULL;
-	int delta = 0, units = SLOB_UNITS(size);
-
-	for (prev = NULL, cur = sp->free; ; prev = cur, cur = slob_next(cur)) {
-		slobidx_t avail = slob_units(cur);
-
-		if (align) {
-			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
-			delta = aligned - cur;
-		}
-		if (avail >= units + delta) { /* room enough? */
-			slob_t *next;
-
-			if (delta) { /* need to fragment head to align? */
-				next = slob_next(cur);
-				set_slob(aligned, avail - delta, next);
-				set_slob(cur, delta, aligned);
-				prev = cur;
-				cur = aligned;
-				avail = slob_units(cur);
-			}
-
-			next = slob_next(cur);
-			if (avail == units) { /* exact fit? unlink. */
-				if (prev)
-					set_slob(prev, slob_units(prev), next);
-				else
-					sp->free = next;
-			} else { /* fragment */
-				if (prev)
-					set_slob(prev, slob_units(prev), cur + units);
-				else
-					sp->free = cur + units;
-				set_slob(cur + units, avail - units, next);
-			}
-
-			sp->units -= units;
-			if (!sp->units)
-				clear_slob_page_free(sp);
-			return cur;
-		}
-		if (slob_last(cur))
-			return NULL;
-	}
+    //printk("Entered slob_page_alloc\n");
+    //https://courses.engr.illinois.edu/cs423/sp2011/mps/mp4/mp4.pdf
+    //http://pastebin.com/Ny2xqPti
+
+    slob_t *prev, *cur, *aligned = NULL;
+    slob_t *best = NULL, *best_prev = NULL, *best_aligned = NULL;
+    slobidx_t avail;
+
+    int delta = 0, best_delta = 0, units = SLOB_UNITS(size);
+    int print = 0;
+
+    if (print_counter > 5000) {
+        print = 1;
+        printk("Request Size: %u\n", units);
+        printk("Avalible Spaces:");
+    } 
+
+    slobidx_t best_size = 0;
+
+    for (prev = NULL, cur = sp->free; ; prev = cur, cur = slob_next(cur)) {
+        avail = slob_units(cur);
+
+        if (align) {
+            aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+            delta = aligned - cur;
+        }
+        if (print) {
+            printk("[%u]", slob_units(cur));
+        }
+        
+        if (avail >= units + delta && (best == NULL || avail - (units + delta) < best_size)) { /* room enough? */
+            //if (print && best != NULL) {
+            //    printk("\nNew Best Fit: [%u], Old: [%u]\n", slob_units(cur), slob_units(best));
+            //}
+            best_aligned = aligned;
+            best_prev = prev;
+            best = cur;
+            best_delta = delta;
+            best_size = avail - (units + delta);
+            
+            if (best_size == 0) { // exact fit no need to keep checking
+                break;
+            }
+
+        }
+        if (slob_last(cur)) { 
+            break;
+        }
+    } // Loop End
+
+    if (best != NULL) {
+        if (print) {
+            printk(", Best: %u\n", slob_units(best));
+        }
+        
+        slob_t *next = NULL;
+        avail = slob_units(best);
+
+        if (best_delta) { /* need to fragment head to align? */
+            next = slob_next(best);
+            set_slob(best_aligned, avail - best_delta, next);
+            set_slob(best, best_delta, best_aligned);
+            best_prev = best;
+            best = best_aligned;
+            avail = slob_units(best);
+        }
+
+        next = slob_next(best);
+
+        if (avail == units) { /* exact fit? unlink. */
+            if (best_prev) {
+                set_slob(best_prev, slob_units(best_prev), next);
+            } else {
+                sp->free = next;
+            }
+        } else { /* fragment */
+            if (best_prev) {
+                set_slob(best_prev, slob_units(best_prev), best + units);
+            } else {
+                sp->free = best + units;
+            }
+            set_slob(best + units, avail - units, next);
+        }
+        
+        sp->units -= units;
+        if (!sp->units) {
+            clear_slob_page_free(sp);
+        }
+
+        return best;
+    } else {
+        printk("ERROR: Nothing seemed to fit on this page.\n");
+        return NULL;
+    }
+}
+
+/* 
+ * Returns the best fitting block size for the given page.
+ * Pretty much the same as slob_page_alloc() but doesnt 
+ * actually alloc any space.
+ */
+static int best_fit_page(struct slob_page *sp, size_t size, int align)
+{
+    //printk("Entered best_fit_page\n");
+    slob_t *prev, *cur, *aligned = NULL;
+    int delta = 0, units = SLOB_UNITS(size);
+
+    slobidx_t best = -1;
+    slob_t *best_cur = NULL;
+
+    for (prev = NULL, cur = sp->free; ; prev = cur, cur = slob_next(cur)) {
+        slobidx_t avail = slob_units(cur);
+
+        if (align) {
+            aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+            delta = aligned - cur;
+        }
+
+        // First time or new best block size
+        if (avail >= units + delta && (best_cur == NULL || avail - (units + delta) < best) ) { /* room enough? */
+            best_cur = cur;
+            best = avail - (units + delta);
+            if(best == 0)
+                return 0;
+        }
+        
+        // Return best block size for this page
+        if (slob_last(cur)) {
+            if (best_cur != NULL) {
+                return best;
+            } else {
+                return -1;
+            }
+        }
+    } // Loop end
 }
 
+
 /*
  * slob_alloc: entry point into the slob allocator.
  */
 static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 {
-	struct slob_page *sp;
-	struct list_head *prev;
-	struct list_head *slob_list;
-	slob_t *b = NULL;
-	unsigned long flags;
+    // Increment and reset printing varible
+    if (print_counter > 5000) {
+        print_counter = 0;
+    }
+    ++print_counter;
+
+    struct slob_page *sp;
+    struct list_head *slob_list;
+    slob_t *b = NULL;
+    unsigned long flags;
+
+    // Varibles for finding the best page for best fit
+    struct slob_page *best_sp = NULL;
+    int best_fit = -1;
+
+    if (size < SLOB_BREAK1)
+        slob_list = &free_slob_small;
+    else if (size < SLOB_BREAK2)
+        slob_list = &free_slob_medium;
+    else
+        slob_list = &free_slob_large;
+
+    spin_lock_irqsave(&slob_lock, flags);
+
+    /* Iterate through each partially free page, try to find room */
+    list_for_each_entry(sp, slob_list, list) {
+        
+        int fit = -1; // reset current fit size
 
-	if (size < SLOB_BREAK1)
-		slob_list = &free_slob_small;
-	else if (size < SLOB_BREAK2)
-		slob_list = &free_slob_medium;
-	else
-		slob_list = &free_slob_large;
-
-	spin_lock_irqsave(&slob_lock, flags);
-	/* Iterate through each partially free page, try to find room */
-	list_for_each_entry(sp, slob_list, list) {
 #ifdef CONFIG_NUMA
-		/*
-		 * If there's a node specification, search for a partial
-		 * page with a matching node id in the freelist.
-		 */
-		if (node != -1 && page_to_nid(&sp->page) != node)
-			continue;
+        /*
+         * If there's a node specification, search for a partial
+         * page with a matching node id in the freelist.
+         */
+        if (node != -1 && page_to_nid(&sp->page) != node)
+            continue;
 #endif
-		/* Enough room on this page? */
-		if (sp->units < SLOB_UNITS(size))
-			continue;
-
-		/* Attempt to alloc */
-		prev = sp->list.prev;
-		b = slob_page_alloc(sp, size, align);
-		if (!b)
-			continue;
-
-		/* Improve fragment distribution and reduce our average
-		 * search time by starting our next search here. (see
-		 * Knuth vol 1, sec 2.5, pg 449) */
-		if (prev != slob_list->prev &&
-				slob_list->next != prev->next)
-			list_move_tail(slob_list, prev->next);
-		break;
-	}
-	spin_unlock_irqrestore(&slob_lock, flags);
-
-	/* Not enough space: must allocate a new page */
-	if (!b) {
-		b = slob_new_pages(gfp & ~__GFP_ZERO, 0, node);
-		if (!b)
-			return NULL;
-		sp = slob_page(b);
-		set_slob_page(sp);
-
-		spin_lock_irqsave(&slob_lock, flags);
-		sp->units = SLOB_UNITS(PAGE_SIZE);
-		sp->free = b;
-		INIT_LIST_HEAD(&sp->list);
-		set_slob(b, SLOB_UNITS(PAGE_SIZE), b + SLOB_UNITS(PAGE_SIZE));
-		set_slob_page_free(sp, slob_list);
-		b = slob_page_alloc(sp, size, align);
-		BUG_ON(!b);
-		spin_unlock_irqrestore(&slob_lock, flags);
-	}
-	if (unlikely((gfp & __GFP_ZERO) && b))
-		memset(b, 0, size);
-	return b;
+        /* Enough room on this page? */
+        if (sp->units < SLOB_UNITS(size))
+            continue;
+
+        fit = best_fit_page(sp, size, align);
+        
+        if (fit == 0) { // Found a page with an exact fit
+            best_sp = sp;
+            break;
+        } else if (fit > 0 && (best_fit == -1 || fit < best_fit)) {
+            best_sp = sp;
+            best_fit = fit;
+        }
+        continue;
+    } // End loop
+    
+    if (best_fit >= 0) { // Actually found a page
+
+        if (best_sp != NULL) {
+            /* Attempt to alloc */
+            b = slob_page_alloc(best_sp, size, align);
+        }
+    }
+
+    spin_unlock_irqrestore(&slob_lock, flags);
+
+    /* Not enough space: must allocate a new page */
+    if (!b) {
+        b = slob_new_pages(gfp & ~__GFP_ZERO, 0, node);
+        if (!b) {
+            return NULL;
+        }
+        sp = slob_page(b);
+        set_slob_page(sp);
+
+        spin_lock_irqsave(&slob_lock, flags);
+        sp->units = SLOB_UNITS(PAGE_SIZE);
+        sp->free = b;
+        INIT_LIST_HEAD(&sp->list);
+        set_slob(b, SLOB_UNITS(PAGE_SIZE), b + SLOB_UNITS(PAGE_SIZE));
+        set_slob_page_free(sp, slob_list);
+        b = slob_page_alloc(sp, size, align);
+        BUG_ON(!b);
+        spin_unlock_irqrestore(&slob_lock, flags);
+    }
+    if (unlikely((gfp & __GFP_ZERO) && b))
+        memset(b, 0, size);
+    return b;
 }
 
 /*
